(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"* { \n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    height: 100vh;\n}\n\nimg {\n    height: 5rem;\n    padding: 1rem;\n}\n\na {\n    text-decoration: none;\n    color: rgb(192, 192, 192);\n    font-weight: 600;\n}\n\ninput {\n    padding: 0.4rem;\n    border: none;\n    border-radius: 15px;\n    background-color: rgb(41, 41, 41, 0.3);\n    color: white;\n    \n}\n\nbutton {\n    text-decoration: none;\n    border: none;\n    background-color: transparent;\n    vertical-align: middle;\n    margin-left: -18px;\n}\n\nbutton:hover {\n    cursor: pointer;\n    opacity: 0.8;\n}\n\n#search-icon {\n    width: 2rem;\n    height: 2rem;\n    opacity: 0.5;\n}\n\n#container {\n    \n    text-align: center;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.default {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(48, 4, 48), rgb(175, 103, 115));\n}\n\n.storm {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(59, 53, 68), rgb(187, 189, 168));\n}\n\n.drizzle {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(106, 92, 128), rgb(171, 172, 167));\n}\n\n.rain {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(63, 43, 94), rgb(135, 136, 124));\n}\n\n.snow {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(149, 136, 168),rgb(189, 168, 189));\n}\n\n.atmosphere {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(228, 133, 24), rgb(230, 219, 126));\n}\n\n.clear {\n    color: rgb(209, 209, 209);\n    background-image: linear-gradient(rgb(31, 138, 138), rgb(196, 194, 125));\n}\n\n.clouds {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(67, 143, 179), rgb(187, 189, 168));\n}\n\n#display {\n    height: 60%;\n}\n\n#country {\n    padding-top: 2rem;\n    font-size: 2.5rem;\n}\n\n#temp-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n}\n\n#search {\n    height: 30%\n}\n\n#footer {\n    text-align: center;\n    padding-top: 1.5rem;\n    height: 6%;\n    width: 100%;\n    background-color: rgb(16, 16, 32);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,qBAAqB;IACrB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,mBAAmB;IACnB,sCAAsC;IACtC,YAAY;;AAEhB;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,6BAA6B;IAC7B,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;;IAEI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,qEAAqE;AACzE;;AAEA;IACI,yBAAyB;IACzB,sEAAsE;AAC1E;;AAEA;IACI,yBAAyB;IACzB,wEAAwE;AAC5E;;AAEA;IACI,yBAAyB;IACzB,sEAAsE;AAC1E;;AAEA;IACI,yBAAyB;IACzB,wEAAwE;AAC5E;;AAEA;IACI,yBAAyB;IACzB,wEAAwE;AAC5E;;AAEA;IACI,yBAAyB;IACzB,wEAAwE;AAC5E;;AAEA;IACI,yBAAyB;IACzB,wEAAwE;AAC5E;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI;AACJ;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,UAAU;IACV,WAAW;IACX,iCAAiC;AACrC",sourcesContent:["* { \n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    height: 100vh;\n}\n\nimg {\n    height: 5rem;\n    padding: 1rem;\n}\n\na {\n    text-decoration: none;\n    color: rgb(192, 192, 192);\n    font-weight: 600;\n}\n\ninput {\n    padding: 0.4rem;\n    border: none;\n    border-radius: 15px;\n    background-color: rgb(41, 41, 41, 0.3);\n    color: white;\n    \n}\n\nbutton {\n    text-decoration: none;\n    border: none;\n    background-color: transparent;\n    vertical-align: middle;\n    margin-left: -18px;\n}\n\nbutton:hover {\n    cursor: pointer;\n    opacity: 0.8;\n}\n\n#search-icon {\n    width: 2rem;\n    height: 2rem;\n    opacity: 0.5;\n}\n\n#container {\n    \n    text-align: center;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.default {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(48, 4, 48), rgb(175, 103, 115));\n}\n\n.storm {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(59, 53, 68), rgb(187, 189, 168));\n}\n\n.drizzle {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(106, 92, 128), rgb(171, 172, 167));\n}\n\n.rain {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(63, 43, 94), rgb(135, 136, 124));\n}\n\n.snow {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(149, 136, 168),rgb(189, 168, 189));\n}\n\n.atmosphere {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(228, 133, 24), rgb(230, 219, 126));\n}\n\n.clear {\n    color: rgb(209, 209, 209);\n    background-image: linear-gradient(rgb(31, 138, 138), rgb(196, 194, 125));\n}\n\n.clouds {\n    color: rgb(214, 214, 214);\n    background-image: linear-gradient(rgb(67, 143, 179), rgb(187, 189, 168));\n}\n\n#display {\n    height: 60%;\n}\n\n#country {\n    padding-top: 2rem;\n    font-size: 2.5rem;\n}\n\n#temp-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n}\n\n#search {\n    height: 30%\n}\n\n#footer {\n    text-align: center;\n    padding-top: 1.5rem;\n    height: 6%;\n    width: 100%;\n    background-color: rgb(16, 16, 32);\n}"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(i[A]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var A=n[c],s=r.base?A[0]+r.base:A[0],d=a[s]||0,g="".concat(s," ").concat(d);a[s]=d+1;var l=t(g),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==l)e[l].references++,e[l].updater(u);else{var p=o(u,r);r.byIndex=c,e.splice(c,0,{identifier:g,updater:p,references:1})}i.push(g)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var A=r(n,o),s=0;s<a.length;s++){var d=t(a[s]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},881:(n,e,t)=>{n.exports=t.p+"f3fd78cbcfdcb1a9e695.png"},76:(n,e,t)=>{n.exports=t.p+"403748507e0bf652887b.png"},29:(n,e,t)=>{n.exports=t.p+"7a43be01428f00d7fe1b.png"},355:(n,e,t)=>{n.exports=t.p+"145fe0128a1db8b546d4.png"},134:(n,e,t)=>{n.exports=t.p+"6ed7169593151c200109.png"},341:(n,e,t)=>{n.exports=t.p+"5a36f5bc9b2e4a4ebbff.png"},225:(n,e,t)=>{n.exports=t.p+"ffefc59c107a6604203b.png"},548:(n,e,t)=>{n.exports=t.p+"e10e4278aea1a1e2240b.png"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),A=t.n(c),s=t(216),d=t.n(s),g=t(589),l=t.n(g),u=t(426),p={};async function m(n,e){return(await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&appid=2e58f4e7b39a2f4f7cc949cf4f3bd92b&units=${e}`,{mode:"cors"})).json()}p.styleTagTransform=l(),p.setAttributes=A(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),e()(u.Z,p),u.Z&&u.Z.locals&&u.Z.locals;var b=t(341),f=t(881),h=t(355),C=t(134),I=t(76),B=t(225),y=t(548);const v=document.getElementById("country"),E=document.getElementById("weather"),x=document.getElementById("temperature"),w=document.getElementById("degree-toggle"),k=document.getElementById("units"),L=document.getElementById("weather-icon"),S=document.getElementById("container");function z(n){v.textContent=n.name,x.textContent=n.main.temp,E.textContent=n.weather[0].description}function j(n){"2"===String(n.weather[0].id).charAt(0)?(L.src=b,S.classList.remove(S.classList.item(0)),S.classList.add("storm")):"3"===String(n.weather[0].id).charAt(0)?(L.src=f,S.classList.remove(S.classList.item(0)),S.classList.add("drizzle")):"5"===String(n.weather[0].id).charAt(0)?(L.src=h,S.classList.remove(S.classList.item(0)),S.classList.add("rain")):"6"===String(n.weather[0].id).charAt(0)?(L.src=C,S.classList.remove(S.classList.item(0)),S.classList.add("snow")):"7"===String(n.weather[0].id).charAt(0)?(L.src=I,S.classList.remove(S.classList.item(0)),S.classList.add("atmosphere")):"800"===String(n.weather[0].id)?(L.src=B,S.classList.remove(S.classList.item(0)),S.classList.add("clear")):"800"!==String(n.weather[0].id)&&"8"===String(n.weather[0].id).charAt(0)&&(L.src=y,S.classList.remove(S.classList.item(0)),S.classList.add("clouds"))}function Y(){v.textContent="Please check that you have entered the name correctly."}var T=t(29);const Z=document.getElementById("search-btn"),F=document.getElementById("search-icon"),M=document.getElementById("search-box"),U=document.getElementById("temp-box"),q=document.getElementById("units");function R(){m(M.value,q.value).then((n=>{n.name?(z(n),j(n)):Y()}))}F.src=T,Z.addEventListener("click",R),M.addEventListener("keypress",(function(n){"Enter"===n.key&&R()})),U.addEventListener("click",(function(){if("°F"===w.textContent){w.textContent="°C",k.value="metric";const n=((parseFloat(x.textContent)-32)*(5/9)).toFixed(2);x.textContent=n}else{w.textContent="°F",k.value="imperial";const n=(1.8*parseFloat(x.textContent)+32).toFixed(2);x.textContent=n}})),m("Iceland","imperial").then((n=>{n.name?(z(n),j(n)):Y()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,